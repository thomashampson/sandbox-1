//MY_GIT_BRANCH = git_branch_name()
//GIT_SHA = env.GIT_COMMIT

pipeline {
  agent none
  environment {
    MY_GIT_BRANCH = git_branch_name()
    GIT_SHA = git_commit($MY_GIT_BRANCH)
  }
  stages {
    stage('Build and Test') {
      agent {
         label "tom_linux-64"
       }
       stages {   
         stage('One') {
           steps {
             sh 'printenv'
             sh 'echo ${GIT_BRANCH}'
             sh 'echo ${MY_GIT_BRANCH}'
             sh 'echo ${GIT_SHA}'
             sh 'echo ${GIT_COMMIT}'
             checkout scm: [$class: 'GitSCM', branches: [[name: "${GIT_SHA}"]]]
             sh 'git rev-parse HEAD'
             sh 'cat jenkins/info.txt'
             input 'Proceed?'
           }
         }
         stage('Two') {
           steps {
             checkout scm: [$class: 'GitSCM', branches: [[name: "${GIT_SHA}"]]]
             sh 'git rev-parse HEAD'
             sh 'cat jenkins/info.txt'
           }
         }
       }
    }
    stage('Package stuff') {
      agent {
         label "tom_linux-64"
       }
       stages {   
         stage('Three') {
           steps {
             checkout scm: [$class: 'GitSCM', branches: [[name: "${GIT_SHA}"]]]
             sh 'git rev-parse HEAD'
             sh 'cat jenkins/info.txt'
           }
         }
         stage('Four') {
           steps {
             checkout scm: [$class: 'GitSCM', branches: [[name: "${GIT_SHA}"]]]
             sh 'git rev-parse HEAD'
             sh 'cat jenkins/info.txt'
          }
        }
      }
    }
  }
}

def git_branch_name() {
  name = scm.branches[0].name
  if (name.contains("*/")) {
    name = name.split("\\*/")[1]
  }
  return name
}

def git_commit(branch_name) {
  sha = sh(returnStdout: true, script: "git rev-parse $branch_name").trim()
  return sha
}

